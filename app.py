import streamlit as st
import requests
import pandas as pd
from datetime import datetime, date, timedelta
import uuid
from pathlib import Path
import speech_recognition as sr
import webbrowser
# ------------------------------
# App Settings / Config
# ------------------------------
st.set_page_config(
    page_title="HealthHub ‚Ä¢ Drug Tools & Appointments",
    page_icon="üíä",
    layout="wide"
)
EMERGENCY_NUMBER = "+918660965291"  # Replace with desired number

# ====== THEME TWEAKS (accessible & medical colors) ======
css = """
<style>
.stApp {
    background: radial-gradient( black 100%);
}

/* Updated Sidebar Styling */
[data-testid="stSidebar"] {
    background-color: #1a1a2e !important; /* A deep, dark blue */
}

/* Set all text inside the sidebar to white */
[data-testid="stSidebar"] * {
    color: #ffffff !important;
}

/* Style for the radio buttons in the sidebar */
.stRadio > label {
    color: #ffffff !important;
}

.stRadio > label:hover {
    background-color: #2e2e4f !important; /* A slightly lighter dark blue on hover */
    border-radius: 8px;
    padding: 8px;
    color: #92e0ff !important; /* A light, vibrant blue on hover */
}

.stRadio > label > div > span {
    color: #ffffff !important;
}

/* Style for the sidebar title */
[data-testid="stSidebar"] h1 {
    color: #92e0ff !important;
    font-weight: bold;
}

/* Style for the sidebar caption */
[data-testid="stSidebar"] .st-cn {
    color: #a0a0c0 !important; /* A soft grey for less prominence */
}

.metric-card {
    border-radius: 16px;
    padding: 16px;
    box-shadow: 0 2px 16px rgba(0,0,0,.06);
    border: 1px solid #d6e4f0;
    background: gray;
}
.section {
    border-radius: 16px;
    padding: 18px 18px 4px 18px;
    box-shadow: 0 2px 16px rgba(0,0,0,.06);
    border: 1px solid #c9def1;
    background: #f5faff;
}
.pill {
    display:inline-block;
    padding: 4px 10px;
    border-radius:999px;
    background:#1f77d0;
    color:black !important;
    font-weight:600;
    font-size:12px;
}
.muted {
    color:black !important;
}

/* Force main content text color to black for readability on white background */
.stApp > header, .stApp > div {
    color: black !important;
}
</style>
"""
st.markdown(css, unsafe_allow_html=True)
red_button_css = """
<style>
div[data-testid="stButton"] > button.emergency-btn {
    background-color: red !important;
    color: white !important;
    font-weight: bold !important;
    border-radius: 10px !important;
    padding: 12px 24px !important;
    font-size: 18px !important;
    box-shadow: 0px 4px 10px rgba(255,0,0,0.5) !important;
}
div[data-testid="stButton"] > button.emergency-btn:hover {
    background-color: darkred !important;
}
</style>
"""
st.markdown(red_button_css, unsafe_allow_html=True)

# Point to your FastAPI (from main.py). Change if your backend runs elsewhere.
BASE_URL = "http://127.0.0.1:8000"

# Where to store local appointments CSV
APPTS_CSV = "appointments.csv"

# ------------------------------
# Language Support
# ------------------------------

# Dictionary for translations
translations = {
    "English": {
        "title": "HealthHub",
        "caption": "Drug tools ‚Ä¢ Appointments ‚Ä¢ NLP",
        "navigate": "Navigate",
        "home": "üè† Home",
        "drug_interaction": "üíä Drug Interaction",
        "dosage_by_age": "üìè Dosage by Age",
        "alternatives": "üîÅ Alternatives",
        "nlp_extract": "üß† NLP Extract",
        "image_to_text": "üñºÔ∏è Image to Text",
        "doctor_appointment": "üìÖ Doctor's Appointment",
        "appointments_admin": "üìã Appointments Admin",
        "welcome": "Welcome to **HealthHub**",
        "home_intro": "A clean, user-friendly portal for quick drug checks and booking doctor appointments.",
        "interactions_header": "üíä Drug Interaction Detection",
        "interactions_caption": "Enter a comma-separated list of drugs to check for harmful interactions.",
        "interactions_placeholder": "ibuprofen, warfarin, omeprazole",
        "interactions_button": "Check Interactions",
        "interactions_warning_input": "Please enter at least two drugs, separated by commas.",
        "interactions_warning_count": "Please enter at least two drugs.",
        "interactions_error": "Harmful interactions detected!",
        "interactions_success": "No harmful interactions detected.",
        "dosage_header": "üìè Age-Specific Dosage Recommendation",
        "drug_name": "Drug name",
        "age_label": "Patient age",
        "get_recommendation": "Get Recommendation",
        "alternatives_header": "üîÅ Alternative Medication Suggestions",
        "alternatives_input": "Drug to find alternatives for",
        "suggest_alternatives": "Suggest Alternatives",
        "alternatives_success": "Alternatives for **{}**:",
        "alternatives_none": "No alternatives found.",
        "nlp_header": "üß† NLP-Based Drug Information Extraction",
        "nlp_text_area": "Enter a medical text",
        "nlp_placeholder": "The patient was prescribed 200mg of ibuprofen to be taken twice a day.",
        "extract_info": "Extract Info",
        "nlp_warning_input": "Enter some text.",
        "nlp_success": "Extracted Information:",
        "nlp_no_info": "No drug information was extracted from the text.",
        "image_to_text_header": "üñºÔ∏è Image to Text (IBM Granite Vision)",
        "input_method": "Choose Input Method",
        "upload_image": "Upload Image",
        "capture_webcam": "Capture from Webcam",
        "image_uploader": "Upload an image",
        "image_camera": "Take a picture",
        "generate_description": "Generate Description",
        "description_success": "Generated Description",
        "booking_header": "üìÖ Book a Doctor's Appointment",
        "booking_caption": "Choose a doctor, pick a date and time, and leave your details. We'll hold your slot immediately.",
        "doctor": "Doctor",
        "mode": "Mode",
        "date": "Date",
        "time": "Time",
        "no_slots": "No slots available",
        "patient_details": "Patient Details",
        "full_name": "Full name",
        "email": "Email (optional)",
        "phone": "Phone",
        "age_patient": "Age",
        "gender": "Gender",
        "notes": "Describe your concern (optional)",
        "confirm_booking": "Confirm Booking",
        "required_fields_warning": "Name and phone are required.",
        "slot_taken_error": "Sorry, that slot was just taken. Please choose another time.",
        "booking_success": "‚úÖ Appointment booked! Your reference ID is **{}**.",
        "view_details": "View booking details",
        "admin_header": "üìã Appointments Admin",
        "admin_caption": "View, filter, update status, and export all bookings.",
        "no_appointments": "No appointments yet.",
        "all": "All",
        "status": "Status",
        "from": "From",
        "to": "To",
        "download_csv": "‚¨áÔ∏è Download CSV",
        "update_status": "Update Status",
        "booking_id": "Booking ID",
        "new_status": "New status",
        "update_button": "Update",
        "status_updated": "Status updated.",
        "booking_id_not_found": "Booking ID not found."
    },
    "Kannada": {
        "title": "‡≤π‡≥Ü‡≤≤‡≥ç‡≤§‡≥ç ‡≤π‡≤¨‡≥ç",
        "caption": "‡≤î‡≤∑‡≤ß ‡≤™‡≤∞‡≤ø‡≤ï‡≤∞‡≤ó‡≤≥‡≥Å ‚Ä¢ ‡≤®‡≥á‡≤Æ‡≤ï‡≤æ‡≤§‡≤ø‡≤ó‡≤≥‡≥Å ‚Ä¢ ‡≤é‡≤®‡≥ç‚Äå‡≤é‡≤≤‡≥ç‚Äå‡≤™‡≤ø",
        "navigate": "‡≤®‡≥ç‡≤Ø‡≤æ‡≤µ‡≤ø‡≤ó‡≥á‡≤ü‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø",
        "home": "üè† ‡≤Æ‡≥Å‡≤ñ‡≤™‡≥Å‡≤ü",
        "drug_interaction": "üíä ‡≤î‡≤∑‡≤ß ‡≤∏‡≤Ç‡≤µ‡≤π‡≤®",
        "dosage_by_age": "üìè ‡≤µ‡≤Ø‡≤∏‡≥ç‡≤∏‡≤ø‡≤® ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞ ‡≤°‡≥ã‡≤∏‡≥á‡≤ú‡≥ç",
        "alternatives": "üîÅ ‡≤™‡≤∞‡≥ç‡≤Ø‡≤æ‡≤Ø‡≤ó‡≤≥‡≥Å",
        "nlp_extract": "üß† ‡≤é‡≤®‡≥ç‚Äå‡≤é‡≤≤‡≥ç‚Äå‡≤™‡≤ø ‡≤π‡≥ä‡≤∞‡≤§‡≥Ü‡≤ó‡≥Ü‡≤Ø‡≥Å‡≤µ‡≤ø‡≤ï‡≥Ü",
        "image_to_text": "üñºÔ∏è ‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤¶‡≤ø‡≤Ç‡≤¶ ‡≤™‡≤†‡≥ç‡≤Ø",
        "doctor_appointment": "üìÖ ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤∞ ‡≤®‡≥á‡≤Æ‡≤ï‡≤æ‡≤§‡≤ø",
        "appointments_admin": "üìã ‡≤®‡≥á‡≤Æ‡≤ï‡≤æ‡≤§‡≤ø‡≤ó‡≤≥ ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤æ‡≤π‡≤ï",
        "welcome": "**‡≤π‡≥Ü‡≤≤‡≥ç‡≤§‡≥ç ‡≤π‡≤¨‡≥ç** ‡≤ó‡≥Ü ‡≤∏‡≥Å‡≤∏‡≥ç‡≤µ‡≤æ‡≤ó‡≤§",
        "home_intro": "‡≤§‡≥ç‡≤µ‡≤∞‡≤ø‡≤§ ‡≤î‡≤∑‡≤ß ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤®‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤∞ ‡≤®‡≥á‡≤Æ‡≤ï‡≤æ‡≤§‡≤ø‡≤ó‡≤æ‡≤ó‡≤ø ‡≤í‡≤Ç‡≤¶‡≥Å ‡≤∏‡≥ç‡≤µ‡≤ö‡≥ç‡≤õ, ‡≤¨‡≤≥‡≤ï‡≥Ü‡≤¶‡≤æ‡≤∞ ‡≤∏‡≥ç‡≤®‡≥á‡≤π‡≤ø ‡≤™‡≥ã‡≤∞‡≥ç‡≤ü‡≤≤‡≥ç.",
        "interactions_header": "üíä ‡≤î‡≤∑‡≤ß ‡≤∏‡≤Ç‡≤µ‡≤π‡≤® ‡≤™‡≤§‡≥ç‡≤§‡≥Ü",
        "interactions_caption": "‡≤π‡≤æ‡≤®‡≤ø‡≤ï‡≤æ‡≤∞‡≤ï ‡≤∏‡≤Ç‡≤µ‡≤π‡≤®‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤ø‡≤∏‡≤≤‡≥Å ‡≤ï‡≤æ‡≤Æ‡≤æ-‡≤µ‡≤ø‡≤≠‡≤ú‡≤ø‡≤§ ‡≤î‡≤∑‡≤ß‡≤ø‡≤ó‡≤≥ ‡≤™‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø.",
        "interactions_placeholder": "‡≤ê‡≤¨‡≥Å‡≤™‡≥ç‡≤∞‡≥ä‡≤´‡≥Ü‡≤®‡≥ç, ‡≤µ‡≤æ‡≤∞‡≥ç‡≤´‡≤∞‡≤ø‡≤®‡≥ç, ‡≤í‡≤Æ‡≥Ü‡≤™‡≥ç‡≤∞‡≤ú‡≥ã‡≤≤‡≥ç",
        "interactions_button": "‡≤∏‡≤Ç‡≤µ‡≤π‡≤®‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤ø‡≤∏‡≤ø",
        "interactions_warning_input": "‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤ï‡≤®‡≤ø‡≤∑‡≥ç‡≤† ‡≤é‡≤∞‡≤°‡≥Å ‡≤î‡≤∑‡≤ß‡≤ø‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤æ‡≤Æ‡≤æ‡≤¶‡≤ø‡≤Ç‡≤¶ ‡≤¨‡≥á‡≤∞‡≥ç‡≤™‡≤°‡≤ø‡≤∏‡≤ø ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø.",
        "interactions_warning_count": "‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤ï‡≤®‡≤ø‡≤∑‡≥ç‡≤† ‡≤é‡≤∞‡≤°‡≥Å ‡≤î‡≤∑‡≤ß‡≤ø‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø.",
        "interactions_error": "‡≤π‡≤æ‡≤®‡≤ø‡≤ï‡≤æ‡≤∞‡≤ï ‡≤∏‡≤Ç‡≤µ‡≤π‡≤®‡≤ó‡≤≥‡≥Å ‡≤™‡≤§‡≥ç‡≤§‡≥Ü‡≤Ø‡≤æ‡≤ó‡≤ø‡≤µ‡≥Ü!",
        "interactions_success": "‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤π‡≤æ‡≤®‡≤ø‡≤ï‡≤æ‡≤∞‡≤ï ‡≤∏‡≤Ç‡≤µ‡≤π‡≤®‡≤ó‡≤≥‡≥Å ‡≤™‡≤§‡≥ç‡≤§‡≥Ü‡≤Ø‡≤æ‡≤ó‡≤ø‡≤≤‡≥ç‡≤≤.",
        "dosage_header": "üìè ‡≤µ‡≤Ø‡≤∏‡≥ç‡≤∏‡≥Å-‡≤®‡≤ø‡≤∞‡≥ç‡≤¶‡≤ø‡≤∑‡≥ç‡≤ü ‡≤°‡≥ã‡≤∏‡≥á‡≤ú‡≥ç ‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å",
        "drug_name": "‡≤î‡≤∑‡≤ß‡≤¶ ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å",
        "age_label": "‡≤∞‡≥ã‡≤ó‡≤ø‡≤Ø ‡≤µ‡≤Ø‡≤∏‡≥ç‡≤∏‡≥Å",
        "get_recommendation": "‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å ‡≤™‡≤°‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø",
        "alternatives_header": "üîÅ ‡≤™‡≤∞‡≥ç‡≤Ø‡≤æ‡≤Ø ‡≤î‡≤∑‡≤ß‡≤ø‡≤ó‡≤≥ ‡≤∏‡≤≤‡≤π‡≥Ü‡≤ó‡≤≥‡≥Å",
        "alternatives_input": "‡≤™‡≤∞‡≥ç‡≤Ø‡≤æ‡≤Ø‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≤≤‡≥Å ‡≤î‡≤∑‡≤ß",
        "suggest_alternatives": "‡≤™‡≤∞‡≥ç‡≤Ø‡≤æ‡≤Ø‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥Ç‡≤ö‡≤ø‡≤∏‡≤ø",
        "alternatives_success": "**{}** ‡≤ó‡≤æ‡≤ó‡≤ø ‡≤™‡≤∞‡≥ç‡≤Ø‡≤æ‡≤Ø‡≤ó‡≤≥‡≥Å:",
        "alternatives_none": "‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤™‡≤∞‡≥ç‡≤Ø‡≤æ‡≤Ø‡≤ó‡≤≥‡≥Å ‡≤ï‡≤Ç‡≤°‡≥Å‡≤¨‡≤Ç‡≤¶‡≤ø‡≤≤‡≥ç‡≤≤.",
        "nlp_header": "üß† ‡≤é‡≤®‡≥ç‚Äå‡≤é‡≤≤‡≥ç‚Äå‡≤™‡≤ø ‡≤Ü‡≤ß‡≤æ‡≤∞‡≤ø‡≤§ ‡≤î‡≤∑‡≤ß ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø ‡≤π‡≥ä‡≤∞‡≤§‡≥Ü‡≤ó‡≥Ü‡≤Ø‡≥Å‡≤µ‡≤ø‡≤ï‡≥Ü",
        "nlp_text_area": "‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤ï‡≥Ä‡≤Ø ‡≤™‡≤†‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø",
        "nlp_placeholder": "‡≤∞‡≥ã‡≤ó‡≤ø‡≤ó‡≥Ü ‡≤¶‡≤ø‡≤®‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤é‡≤∞‡≤°‡≥Å ‡≤¨‡≤æ‡≤∞‡≤ø 200mg ‡≤ê‡≤¨‡≥Å‡≤™‡≥ç‡≤∞‡≥ä‡≤´‡≥Ü‡≤®‡≥ç ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤≤‡≥Å ‡≤∏‡≥Ç‡≤ö‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤§‡≥ç‡≤§‡≥Å.",
        "extract_info": "‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥ä‡≤∞‡≤§‡≥Ü‡≤ó‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø",
        "nlp_warning_input": "‡≤ï‡≥Ü‡≤≤‡≤µ‡≥Å ‡≤™‡≤†‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø.",
        "nlp_success": "‡≤π‡≥ä‡≤∞‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶ ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø:",
        "nlp_no_info": "‡≤™‡≤†‡≥ç‡≤Ø‡≤¶‡≤ø‡≤Ç‡≤¶ ‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤î‡≤∑‡≤ß ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥ä‡≤∞‡≤§‡≥Ü‡≤ó‡≥Ü‡≤Ø‡≤≤‡≤æ‡≤ó‡≤ø‡≤≤‡≥ç‡≤≤.",
        "image_to_text_header": "üñºÔ∏è ‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤¶‡≤ø‡≤Ç‡≤¶ ‡≤™‡≤†‡≥ç‡≤Ø (‡≤ê‡≤¨‡≤ø‡≤é‡≤Ç ‡≤ó‡≥ç‡≤∞‡≤æ‡≤®‡≥à‡≤ü‡≥ç ‡≤µ‡≤ø‡≤∑‡≤®‡≥ç)",
        "input_method": "‡≤á‡≤®‡≥ç‡≤™‡≥Å‡≤ü‡≥ç ‡≤µ‡≤ø‡≤ß‡≤æ‡≤®‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤∞‡≤ø‡≤∏‡≤ø",
        "upload_image": "‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤™‡≥ç‡≤≤‡≥ã‡≤°‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø",
        "capture_webcam": "‡≤µ‡≥Ü‡≤¨‡≥ç‚Äå‡≤ï‡≥ç‡≤Ø‡≤æ‡≤Æ‡≥ç‚Äå‡≤®‡≤ø‡≤Ç‡≤¶ ‡≤∏‡≥Ü‡≤∞‡≥Ü‡≤π‡≤ø‡≤°‡≤ø‡≤Ø‡≤ø‡≤∞‡≤ø",
        "image_uploader": "‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤™‡≥ç‡≤≤‡≥ã‡≤°‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø",
        "image_camera": "‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø",
        "generate_description": "‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤∞‡≤ö‡≤ø‡≤∏‡≤ø",
        "description_success": "‡≤∞‡≤ö‡≤ø‡≤§‡≤µ‡≤æ‡≤¶ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü",
        "booking_header": "üìÖ ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤∞ ‡≤®‡≥á‡≤Æ‡≤ï‡≤æ‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤æ‡≤Ø‡≥ç‡≤¶‡≤ø‡≤∞‡≤ø‡≤∏‡≤ø",
        "booking_caption": "‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤∞‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø, ‡≤¶‡≤ø‡≤®‡≤æ‡≤Ç‡≤ï ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≤Æ‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤∞‡≤ø‡≤∏‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≥Ä‡≤°‡≤ø. ‡≤®‡≤æ‡≤µ‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≥ç‡≤≤‡≤æ‡≤ü‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≤ï‡≥ç‡≤∑‡≤£‡≤µ‡≥á ‡≤ï‡≤æ‡≤Ø‡≥ç‡≤¶‡≤ø‡≤∞‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≥á‡≤µ‡≥Ü.",
        "doctor": "‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤∞‡≥Å",
        "mode": "‡≤Æ‡≥ã‡≤°‡≥ç",
        "date": "‡≤¶‡≤ø‡≤®‡≤æ‡≤Ç‡≤ï",
        "time": "‡≤∏‡≤Æ‡≤Ø",
        "no_slots": "‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤∏‡≥ç‡≤≤‡≤æ‡≤ü‡≥ç‚Äå‡≤ó‡≤≥‡≥Å ‡≤≤‡≤≠‡≥ç‡≤Ø‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤",
        "patient_details": "‡≤∞‡≥ã‡≤ó‡≤ø‡≤Ø ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ó‡≤≥‡≥Å",
        "full_name": "‡≤™‡≥Ç‡≤∞‡≥ç‡≤£ ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å",
        "email": "‡≤á‡≤Æ‡≥á‡≤≤‡≥ç (‡≤ê‡≤ö‡≥ç‡≤õ‡≤ø‡≤ï)",
        "phone": "‡≤´‡≥ã‡≤®‡≥ç",
        "age_patient": "‡≤µ‡≤Ø‡≤∏‡≥ç‡≤∏‡≥Å",
        "gender": "‡≤≤‡≤ø‡≤Ç‡≤ó",
        "notes": "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≤Æ‡≤∏‡≥ç‡≤Ø‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ø‡≤∏‡≤ø (‡≤ê‡≤ö‡≥ç‡≤õ‡≤ø‡≤ï)",
        "confirm_booking": "‡≤¨‡≥Å‡≤ï‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤¶‡≥É‡≤¢‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤ø",
        "required_fields_warning": "‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤´‡≥ã‡≤®‡≥ç ‡≤Ö‡≤ó‡≤§‡≥ç‡≤Ø‡≤µ‡≤ø‡≤¶‡≥Ü.",
        "slot_taken_error": "‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤Ü ‡≤∏‡≥ç‡≤≤‡≤æ‡≤ü‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤à‡≤ó‡≤∑‡≥ç‡≤ü‡≥á ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤¨‡≥á‡≤∞‡≥Ü ‡≤∏‡≤Æ‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤∞‡≤ø‡≤∏‡≤ø.",
        "booking_success": "‚úÖ ‡≤®‡≥á‡≤Æ‡≤ï‡≤æ‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤æ‡≤Ø‡≥ç‡≤¶‡≤ø‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü! ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤â‡≤≤‡≥ç‡≤≤‡≥á‡≤ñ ‡≤ê‡≤°‡≤ø **{}** ‡≤Ü‡≤ó‡≤ø‡≤¶‡≥Ü.",
        "view_details": "‡≤¨‡≥Å‡≤ï‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤∏‡≤ø",
        "admin_header": "üìã ‡≤®‡≥á‡≤Æ‡≤ï‡≤æ‡≤§‡≤ø‡≤ó‡≤≥ ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤æ‡≤π‡≤ï",
        "admin_caption": "‡≤é‡≤≤‡≥ç‡≤≤‡≤æ ‡≤¨‡≥Å‡≤ï‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤∏‡≤ø, ‡≤´‡≤ø‡≤≤‡≥ç‡≤ü‡≤∞‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø, ‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∞‡≤´‡≥ç‡≤§‡≥Å ‡≤Æ‡≤æ‡≤°‡≤ø.",
        "no_appointments": "‡≤á‡≤®‡≥ç‡≤®‡≥Ç ‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤®‡≥á‡≤Æ‡≤ï‡≤æ‡≤§‡≤ø‡≤ó‡≤≥‡≤ø‡≤≤‡≥ç‡≤≤.",
        "all": "‡≤é‡≤≤‡≥ç‡≤≤‡≤æ",
        "status": "‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø",
        "from": "‡≤á‡≤Ç‡≤¶",
        "to": "‡≤ó‡≥Ü",
        "download_csv": "‚¨áÔ∏è ‡≤∏‡≤ø‡≤é‡≤∏‡≥ç‚Äå‡≤µ‡≤ø ‡≤°‡≥å‡≤®‡≥ç‚Äå‡≤≤‡≥ã‡≤°‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø",
        "update_status": "‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤ø",
        "booking_id": "‡≤¨‡≥Å‡≤ï‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤ê‡≤°‡≤ø",
        "new_status": "‡≤π‡≥ä‡≤∏ ‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø",
        "update_button": "‡≤®‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤ø",
        "status_updated": "‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.",
        "booking_id_not_found": "‡≤¨‡≥Å‡≤ï‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤ê‡≤°‡≤ø ‡≤ï‡≤Ç‡≤°‡≥Å‡≤¨‡≤Ç‡≤¶‡≤ø‡≤≤‡≥ç‡≤≤."
    },
    "Hindi": {
        "title": "‡§π‡•á‡§≤‡•ç‡§• ‡§π‡§¨",
        "caption": "‡§°‡•ç‡§∞‡§ó ‡§ü‡•Ç‡§≤‡•ç‡§∏ ‚Ä¢ ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‚Ä¢ ‡§è‡§®‡§è‡§≤‡§™‡•Ä",
        "navigate": "‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
        "home": "üè† ‡§π‡•ã‡§Æ",
        "drug_interaction": "üíä ‡§°‡•ç‡§∞‡§ó ‡§á‡§Ç‡§ü‡§∞‡•á‡§ï‡•ç‡§∂‡§®",
        "dosage_by_age": "üìè ‡§â‡§Æ‡•ç‡§∞ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ñ‡•Å‡§∞‡§æ‡§ï",
        "alternatives": "üîÅ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™",
        "nlp_extract": "üß† ‡§è‡§®‡§è‡§≤‡§™‡•Ä ‡§è‡§ï‡•ç‡§∏‡§ü‡•ç‡§∞‡•à‡§ï‡•ç‡§ü",
        "image_to_text": "üñºÔ∏è ‡§á‡§Æ‡•á‡§ú ‡§∏‡•á ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü",
        "doctor_appointment": "üìÖ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡§æ ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü",
        "appointments_admin": "üìã ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§è‡§°‡§Æ‡§ø‡§®",
        "welcome": "**‡§π‡•á‡§≤‡•ç‡§• ‡§π‡§¨** ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à",
        "home_intro": "‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§¶‡§µ‡§æ ‡§ú‡§æ‡§Ç‡§ö ‡§î‡§∞ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ, ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ-‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤‡•§",
        "interactions_header": "üíä ‡§°‡•ç‡§∞‡§ó ‡§á‡§Ç‡§ü‡§∞‡•á‡§ï‡•ç‡§∂‡§® ‡§°‡§ø‡§ü‡•á‡§ï‡•ç‡§∂‡§®",
        "interactions_caption": "‡§π‡§æ‡§®‡§ø‡§ï‡§æ‡§∞‡§ï ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§∂‡§® ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¶‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§Ö‡§≤‡•ç‡§™‡§µ‡§ø‡§∞‡§æ‡§Æ-‡§™‡•É‡§•‡§ï ‡§∏‡•Ç‡§ö‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§",
        "interactions_placeholder": "‡§á‡§¨‡•Å‡§™‡•ç‡§∞‡•ã‡§´‡•á‡§®, ‡§µ‡§æ‡§∞‡§´‡•á‡§∞‡§ø‡§®, ‡§ì‡§Æ‡•á‡§™‡•ç‡§∞‡§æ‡§ú‡•ã‡§≤",
        "interactions_button": "‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§∂‡§® ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
        "interactions_warning_input": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§≤‡•ç‡§™‡§µ‡§ø‡§∞‡§æ‡§Æ ‡§∏‡•á ‡§Ö‡§≤‡§ó ‡§ï‡•Ä ‡§ó‡§à ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§¶‡•ã ‡§¶‡§µ‡§æ‡§è‡§Ç ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§",
        "interactions_warning_count": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§¶‡•ã ‡§¶‡§µ‡§æ‡§è‡§Ç ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§",
        "interactions_error": "‡§π‡§æ‡§®‡§ø‡§ï‡§æ‡§∞‡§ï ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§∂‡§® ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ!",
        "interactions_success": "‡§ï‡•ã‡§à ‡§π‡§æ‡§®‡§ø‡§ï‡§æ‡§∞‡§ï ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§∂‡§® ‡§ï‡§æ ‡§™‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤‡§æ‡•§",
        "dosage_header": "üìè ‡§Ü‡§Ø‡•Å-‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ñ‡•Å‡§∞‡§æ‡§ï ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂",
        "drug_name": "‡§¶‡§µ‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ",
        "age_label": "‡§∞‡•ã‡§ó‡•Ä ‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§∞",
        "get_recommendation": "‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
        "alternatives_header": "üîÅ ‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï ‡§¶‡§µ‡§æ ‡§∏‡•Å‡§ù‡§æ‡§µ",
        "alternatives_input": "‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§ñ‡•ã‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¶‡§µ‡§æ",
        "suggest_alternatives": "‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§∏‡•Å‡§ù‡§æ‡§è‡§Ç",
        "alternatives_success": "**{}** ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™:",
        "alternatives_none": "‡§ï‡•ã‡§à ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§",
        "nlp_header": "üß† ‡§è‡§®‡§è‡§≤‡§™‡•Ä-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§¶‡§µ‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§ø‡§∑‡•ç‡§ï‡§∞‡•ç‡§∑‡§£",
        "nlp_text_area": "‡§è‡§ï ‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
        "nlp_placeholder": "‡§∞‡•ã‡§ó‡•Ä ‡§ï‡•ã ‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§¶‡•ã ‡§¨‡§æ‡§∞ 200mg ‡§á‡§¨‡•Å‡§™‡•ç‡§∞‡•ã‡§´‡•á‡§® ‡§≤‡•á‡§®‡•á ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§¶‡•Ä ‡§ó‡§à ‡§•‡•Ä‡•§",
        "extract_info": "‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç",
        "nlp_warning_input": "‡§ï‡•Å‡§õ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§",
        "nlp_success": "‡§®‡§ø‡§ï‡§æ‡§≤‡•Ä ‡§ó‡§à ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:",
        "nlp_no_info": "‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§∏‡•á ‡§ï‡•ã‡§à ‡§¶‡§µ‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§®‡§ø‡§ï‡§æ‡§≤‡•Ä ‡§ó‡§à‡•§",
        "image_to_text_header": "üñºÔ∏è ‡§á‡§Æ‡•á‡§ú ‡§∏‡•á ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü (‡§Ü‡§à‡§¨‡•Ä‡§è‡§Æ ‡§ó‡•ç‡§∞‡•á‡§®‡§æ‡§á‡§ü ‡§µ‡§ø‡§ú‡§®)",
        "input_method": "‡§á‡§®‡§™‡•Å‡§ü ‡§µ‡§ø‡§ß‡§ø ‡§ö‡•Å‡§®‡•á‡§Ç",
        "upload_image": "‡§á‡§Æ‡•á‡§ú ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "capture_webcam": "‡§µ‡•á‡§¨‡§ï‡•à‡§Æ ‡§∏‡•á ‡§ï‡•à‡§™‡•ç‡§ö‡§∞ ‡§ï‡§∞‡•á‡§Ç",
        "image_uploader": "‡§è‡§ï ‡§á‡§Æ‡•á‡§ú ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "image_camera": "‡§è‡§ï ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§≤‡•á‡§Ç",
        "generate_description": "‡§µ‡§ø‡§µ‡§∞‡§£ ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç",
        "description_success": "‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§µ‡§ø‡§µ‡§∞‡§£",
        "booking_header": "üìÖ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡§æ ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§ï‡§∞‡•á‡§Ç",
        "booking_caption": "‡§è‡§ï ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç, ‡§è‡§ï ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§î‡§∞ ‡§∏‡§Æ‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç, ‡§î‡§∞ ‡§Ö‡§™‡§®‡•á ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§õ‡•ã‡§°‡§º ‡§¶‡•á‡§Ç‡•§ ‡§π‡§Æ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡•ç‡§≤‡•â‡§ü ‡§Ü‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡§∞ ‡§¶‡•á‡§Ç‡§ó‡•á‡•§",
        "doctor": "‡§°‡•â‡§ï‡•ç‡§ü‡§∞",
        "mode": "‡§Æ‡•ã‡§°",
        "date": "‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï",
        "time": "‡§∏‡§Æ‡§Ø",
        "no_slots": "‡§ï‡•ã‡§à ‡§∏‡•ç‡§≤‡•â‡§ü ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç",
        "patient_details": "‡§∞‡•ã‡§ó‡•Ä ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£",
        "full_name": "‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ",
        "email": "‡§à‡§Æ‡•á‡§≤ (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)",
        "phone": "‡§´‡§º‡•ã‡§®",
        "age_patient": "‡§â‡§Æ‡•ç‡§∞",
        "gender": "‡§≤‡§ø‡§Ç‡§ó",
        "notes": "‡§Ö‡§™‡§®‡•Ä ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)",
        "confirm_booking": "‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡•á‡§Ç",
        "required_fields_warning": "‡§®‡§æ‡§Æ ‡§î‡§∞ ‡§´‡§º‡•ã‡§® ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡§Ç‡•§",
        "slot_taken_error": "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§µ‡§π ‡§∏‡•ç‡§≤‡•â‡§ü ‡§Ö‡§≠‡•Ä ‡§≤‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§∏‡§Æ‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç‡•§",
        "booking_success": "‚úÖ ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§π‡•ã ‡§ó‡§Ø‡§æ! ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§Ü‡§à‡§°‡•Ä **{}** ‡§π‡•à‡•§",
        "view_details": "‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡•á‡§ñ‡•á‡§Ç",
        "admin_header": "üìã ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§è‡§°‡§Æ‡§ø‡§®",
        "admin_caption": "‡§∏‡§≠‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§¶‡•á‡§ñ‡•á‡§Ç, ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç, ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "no_appointments": "‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§",
        "all": "‡§∏‡§≠‡•Ä",
        "status": "‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
        "from": "‡§∏‡•á",
        "to": "‡§§‡§ï",
        "download_csv": "‚¨áÔ∏è ‡§∏‡•Ä‡§è‡§∏‡§µ‡•Ä ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
        "update_status": "‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
        "booking_id": "‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§Ü‡§à‡§°‡•Ä",
        "new_status": "‡§®‡§à ‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
        "update_button": "‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
        "status_updated": "‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡•Ä ‡§ó‡§à‡•§",
        "booking_id_not_found": "‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§Ü‡§à‡§°‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§"
    },
    "Telugu": {
        "title": "‡∞π‡±Ü‡∞≤‡±ç‡∞§‡±ç ‡∞π‡∞¨‡±ç",
        "caption": "‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤ ‡∞∏‡∞æ‡∞ß‡∞®‡∞æ‡∞≤‡±Å ‚Ä¢ ‡∞Ö‡∞™‡∞æ‡∞Ø‡∞ø‡∞Ç‡∞ü‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞≤‡±Å ‚Ä¢ NLP",
        "navigate": "‡∞®‡∞æ‡∞µ‡∞ø‡∞ó‡±á‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "home": "üè† ‡∞π‡±ã‡∞Æ‡±ç",
        "drug_interaction": "üíä ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤ ‡∞™‡∞∞‡∞∏‡±ç‡∞™‡∞∞ ‡∞ö‡∞∞‡±ç‡∞Ø",
        "dosage_by_age": "üìè ‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å ‡∞™‡±ç‡∞∞‡∞ï‡∞æ‡∞∞‡∞Ç ‡∞Æ‡±ã‡∞§‡∞æ‡∞¶‡±Å",
        "alternatives": "üîÅ ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡∞æ‡∞Æ‡±ç‡∞®‡∞æ‡∞Ø‡∞æ‡∞≤‡±Å",
        "nlp_extract": "üß† NLP ‡∞∏‡∞Ç‡∞ó‡±ç‡∞∞‡∞π‡∞£",
        "image_to_text": "üñºÔ∏è ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞Ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞µ‡∞ö‡∞®‡∞Ç",
        "doctor_appointment": "üìÖ ‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±ç ‡∞Ö‡∞™‡∞æ‡∞Ø‡∞ø‡∞Ç‡∞ü‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç",
        "appointments_admin": "üìã ‡∞Ö‡∞™‡∞æ‡∞Ø‡∞ø‡∞Ç‡∞ü‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞≤ ‡∞Ö‡∞°‡±ç‡∞Æ‡∞ø‡∞®‡±ç",
        "welcome": "**‡∞π‡±Ü‡∞≤‡±ç‡∞§‡±ç ‡∞π‡∞¨‡±ç** ‡∞ï‡±Å ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç",
        "home_intro": "‡∞§‡±ç‡∞µ‡∞∞‡∞ø‡∞§ ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤ ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±ç ‡∞Ö‡∞™‡∞æ‡∞Ø‡∞ø‡∞Ç‡∞ü‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞≤‡±Å ‡∞¨‡±Å‡∞ï‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞í‡∞ï ‡∞∂‡±Å‡∞≠‡±ç‡∞∞‡∞Æ‡±à‡∞®, ‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å-‡∞∏‡±ç‡∞®‡±á‡∞π‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞ï ‡∞™‡±ã‡∞∞‡±ç‡∞ü‡∞≤‡±ç.",
        "interactions_header": "üíä ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤ ‡∞™‡∞∞‡∞∏‡±ç‡∞™‡∞∞ ‡∞ö‡∞∞‡±ç‡∞Ø ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å",
        "interactions_caption": "‡∞π‡∞æ‡∞®‡∞ø‡∞ï‡∞∞‡∞Æ‡±à‡∞® ‡∞™‡∞∞‡∞∏‡±ç‡∞™‡∞∞ ‡∞ö‡∞∞‡±ç‡∞Ø‡∞≤‡∞®‡±Å ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ï‡∞æ‡∞Æ‡∞æ-‡∞µ‡∞ø‡∞≠‡∞ú‡∞ø‡∞§ ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤ ‡∞ú‡∞æ‡∞¨‡∞ø‡∞§‡∞æ‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
        "interactions_placeholder": "‡∞ê‡∞¨‡±Å‡∞™‡±ç‡∞∞‡±ã‡∞´‡±Ü‡∞®‡±ç, ‡∞µ‡∞æ‡∞∞‡±ç‡∞´‡∞∞‡∞ø‡∞®‡±ç, ‡∞í‡∞Æ‡±Ü‡∞™‡±ç‡∞∞‡∞ú‡±ã‡∞≤‡±ç",
        "interactions_button": "‡∞™‡∞∞‡∞∏‡±ç‡∞™‡∞∞ ‡∞ö‡∞∞‡±ç‡∞Ø‡∞≤‡∞®‡±Å ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "interactions_warning_input": "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞ï‡∞®‡±Ä‡∞∏‡∞Ç ‡∞∞‡±Ü‡∞Ç‡∞°‡±Å ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤‡∞®‡±Å, ‡∞ï‡∞æ‡∞Æ‡∞æ‡∞≤‡∞§‡±ã ‡∞µ‡±á‡∞∞‡±Å ‡∞ö‡±á‡∞∏‡∞ø ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
        "interactions_warning_count": "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞ï‡∞®‡±Ä‡∞∏‡∞Ç ‡∞∞‡±Ü‡∞Ç‡∞°‡±Å ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
        "interactions_error": "‡∞π‡∞æ‡∞®‡∞ø‡∞ï‡∞∞‡∞Æ‡±à‡∞® ‡∞™‡∞∞‡∞∏‡±ç‡∞™‡∞∞ ‡∞ö‡∞∞‡±ç‡∞Ø‡∞≤‡±Å ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡±ç‡∞°‡∞æ‡∞Ø‡∞ø!",
        "interactions_success": "‡∞π‡∞æ‡∞®‡∞ø‡∞ï‡∞∞‡∞Æ‡±à‡∞® ‡∞™‡∞∞‡∞∏‡±ç‡∞™‡∞∞ ‡∞ö‡∞∞‡±ç‡∞Ø‡∞≤‡±Å ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å.",
        "dosage_header": "üìè ‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å-‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡∞ø‡∞∑‡±ç‡∞ü ‡∞Æ‡±ã‡∞§‡∞æ‡∞¶‡±Å ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å",
        "drug_name": "‡∞Æ‡∞Ç‡∞¶‡±Å ‡∞™‡±á‡∞∞‡±Å",
        "age_label": "‡∞∞‡±ã‡∞ó‡∞ø ‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å",
        "get_recommendation": "‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å ‡∞™‡±ä‡∞Ç‡∞¶‡∞Ç‡∞°‡∞ø",
        "alternatives_header": "üîÅ ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡∞æ‡∞Æ‡±ç‡∞®‡∞æ‡∞Ø ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤ ‡∞∏‡±Ç‡∞ö‡∞®‡∞≤‡±Å",
        "alternatives_input": "‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡∞æ‡∞Æ‡±ç‡∞®‡∞æ‡∞Ø‡∞æ‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞Æ‡∞Ç‡∞¶‡±Å",
        "suggest_alternatives": "‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡∞æ‡∞Æ‡±ç‡∞®‡∞æ‡∞Ø‡∞æ‡∞≤‡∞®‡±Å ‡∞∏‡±Ç‡∞ö‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "alternatives_success": "**{}** ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡∞æ‡∞Æ‡±ç‡∞®‡∞æ‡∞Ø‡∞æ‡∞≤‡±Å:",
        "alternatives_none": "‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡∞æ‡∞Æ‡±ç‡∞®‡∞æ‡∞Ø‡∞æ‡∞≤‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å.",
        "nlp_header": "üß† NLP-‡∞Ü‡∞ß‡∞æ‡∞∞‡∞ø‡∞§ ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞∏‡∞Ç‡∞ó‡±ç‡∞∞‡∞π‡∞£",
        "nlp_text_area": "‡∞µ‡±à‡∞¶‡±ç‡∞Ø ‡∞µ‡∞ö‡∞®‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "nlp_placeholder": "‡∞∞‡±ã‡∞ó‡∞ø‡∞ï‡∞ø ‡∞∞‡±ã‡∞ú‡±Å‡∞ï‡±Å ‡∞∞‡±Ü‡∞Ç‡∞°‡±Å‡∞∏‡∞æ‡∞∞‡±ç‡∞≤‡±Å 200mg ‡∞ê‡∞¨‡±Å‡∞™‡±ç‡∞∞‡±ã‡∞´‡±Ü‡∞®‡±ç ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞µ‡∞æ‡∞≤‡∞®‡∞ø ‡∞∏‡±Ç‡∞ö‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø.",
        "extract_info": "‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞∏‡∞Ç‡∞ó‡±ç‡∞∞‡∞π‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "nlp_warning_input": "‡∞ï‡±ä‡∞Ç‡∞§ ‡∞µ‡∞ö‡∞®‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
        "nlp_success": "‡∞∏‡∞Ç‡∞ó‡±ç‡∞∞‡∞π‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞® ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç:",
        "nlp_no_info": "‡∞µ‡∞ö‡∞®‡∞Ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞Ç‡∞¶‡±Å‡∞≤ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞∏‡∞Ç‡∞ó‡±ç‡∞∞‡∞π‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å.",
        "image_to_text_header": "üñºÔ∏è ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞Ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞µ‡∞ö‡∞®‡∞Ç (IBM ‡∞ó‡±ç‡∞∞‡∞æ‡∞®‡±à‡∞ü‡±ç ‡∞µ‡∞ø‡∞ú‡∞®‡±ç)",
        "input_method": "‡∞á‡∞®‡±ç‚Äå‡∞™‡±Å‡∞ü‡±ç ‡∞™‡∞¶‡±ç‡∞ß‡∞§‡∞ø‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
        "upload_image": "‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "capture_webcam": "‡∞µ‡±Ü‡∞¨‡±ç‚Äå‡∞ï‡±ç‡∞Ø‡∞æ‡∞Æ‡±ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞∏‡∞Ç‡∞ó‡±ç‡∞∞‡∞π‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "image_uploader": "‡∞í‡∞ï ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "image_camera": "‡∞í‡∞ï ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞Ç ‡∞§‡±Ä‡∞Ø‡∞Ç‡∞°‡∞ø",
        "generate_description": "‡∞µ‡∞ø‡∞µ‡∞∞‡∞£‡∞®‡±Å ‡∞∞‡±Ç‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "description_success": "‡∞∞‡±Ç‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞® ‡∞µ‡∞ø‡∞µ‡∞∞‡∞£",
        "booking_header": "üìÖ ‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±ç ‡∞Ö‡∞™‡∞æ‡∞Ø‡∞ø‡∞Ç‡∞ü‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞¨‡±Å‡∞ï‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "booking_caption": "‡∞í‡∞ï ‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±ç‚Äå‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø, ‡∞í‡∞ï ‡∞§‡±á‡∞¶‡±Ä ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞Æ‡∞Ø‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡±Ä ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡∞®‡±Å ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø. ‡∞Æ‡±á‡∞Æ‡±Å ‡∞Æ‡±Ä ‡∞∏‡±ç‡∞≤‡∞æ‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞µ‡±Ü‡∞Ç‡∞ü‡∞®‡±á ‡∞∞‡∞ø‡∞ú‡∞∞‡±ç‡∞µ‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞Æ‡±Å.",
        "doctor": "‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±ç",
        "mode": "‡∞Æ‡±ã‡∞°‡±ç",
        "date": "‡∞§‡±á‡∞¶‡±Ä",
        "time": "‡∞∏‡∞Æ‡∞Ø‡∞Ç",
        "no_slots": "‡∞è ‡∞∏‡±ç‡∞≤‡∞æ‡∞ü‡±ç‚Äå‡∞≤‡±Å ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞≤‡±á‡∞µ‡±Å",
        "patient_details": "‡∞∞‡±ã‡∞ó‡∞ø ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å",
        "full_name": "‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞™‡±á‡∞∞‡±Å",
        "email": "‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç (‡∞ê‡∞ö‡±ç‡∞õ‡∞ø‡∞ï‡∞Ç)",
        "phone": "‡∞´‡±ã‡∞®‡±ç",
        "age_patient": "‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å",
        "gender": "‡∞≤‡∞ø‡∞Ç‡∞ó‡∞Ç",
        "notes": "‡∞Æ‡±Ä ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø‡∞®‡±Å ‡∞µ‡∞ø‡∞µ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø (‡∞ê‡∞ö‡±ç‡∞õ‡∞ø‡∞ï‡∞Ç)",
        "confirm_booking": "‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "required_fields_warning": "‡∞™‡±á‡∞∞‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞´‡±ã‡∞®‡±ç ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç.",
        "slot_taken_error": "‡∞ï‡±ç‡∞∑‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞Ü ‡∞∏‡±ç‡∞≤‡∞æ‡∞ü‡±ç ‡∞á‡∞™‡±ç‡∞™‡±Å‡∞°‡±á ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞∞‡±ä‡∞ï ‡∞∏‡∞Æ‡∞Ø‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø.",
        "booking_success": "‚úÖ ‡∞Ö‡∞™‡∞æ‡∞Ø‡∞ø‡∞Ç‡∞ü‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç ‡∞¨‡±Å‡∞ï‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø! ‡∞Æ‡±Ä ‡∞∞‡∞ø‡∞´‡∞∞‡±Ü‡∞®‡±ç‡∞∏‡±ç ID **{}**.",
        "view_details": "‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡∞®‡±Å ‡∞ö‡±Ç‡∞°‡∞Ç‡∞°‡∞ø",
        "admin_header": "üìã ‡∞Ö‡∞™‡∞æ‡∞Ø‡∞ø‡∞Ç‡∞ü‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞≤ ‡∞Ö‡∞°‡±ç‡∞Æ‡∞ø‡∞®‡±ç",
        "admin_caption": "‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç‚Äå‡∞≤‡∞®‡±Å ‡∞µ‡±Ä‡∞ï‡±ç‡∞∑‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞´‡∞ø‡∞≤‡±ç‡∞ü‡∞∞‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø, ‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø‡∞®‡∞ø ‡∞®‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞é‡∞ó‡±Å‡∞Æ‡∞§‡∞ø ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
        "no_appointments": "‡∞á‡∞Ç‡∞ï‡∞æ ‡∞Ö‡∞™‡∞æ‡∞Ø‡∞ø‡∞Ç‡∞ü‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞≤‡±Å ‡∞≤‡±á‡∞µ‡±Å.",
        "all": "‡∞Ö‡∞®‡±ç‡∞®‡∞ø",
        "status": "‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø",
        "from": "‡∞®‡±Å‡∞Ç‡∞°‡∞ø",
        "to": "‡∞µ‡∞∞‡∞ï‡±Å",
        "download_csv": "‚¨áÔ∏è CSV‡∞®‡∞ø ‡∞°‡±å‡∞®‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        "update_status": "‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø‡∞®‡∞ø ‡∞®‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "booking_id": "‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ID",
        "new_status": "‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø",
        "update_button": "‡∞®‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "status_updated": "‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø ‡∞®‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø.",
        "booking_id_not_found": "‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ID ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å."
    },
    "Tamil": {
        "title": "‡Æπ‡ØÜ‡Æ≤‡Øç‡Æ§‡Øç ‡Æπ‡Æ™‡Øç",
        "caption": "‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æï‡Æ∞‡ØÅ‡Æµ‡Æø‡Æï‡Æ≥‡Øç ‚Ä¢ ‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç ‚Ä¢ NLP",
        "navigate": "‡Æö‡ØÜ‡Æ≤‡Øç‡Æ≤‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "home": "üè† ‡ÆÆ‡ØÅ‡Æï‡Æ™‡Øç‡Æ™‡ØÅ",
        "drug_interaction": "üíä ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æá‡Æü‡Øà‡Æµ‡Æø‡Æ©‡Øà",
        "dosage_by_age": "üìè ‡Æµ‡ÆØ‡Æ§‡ØÅ ‡Æµ‡Ææ‡Æ∞‡Æø‡ÆØ‡Ææ‡Æï ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡Æ≥‡Æµ‡ØÅ",
        "alternatives": "üîÅ ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øç",
        "nlp_extract": "üß† NLP ‡Æ™‡Æø‡Æ∞‡Æø‡Æ§‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æ≤‡Øç",
        "image_to_text": "üñºÔ∏è ‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Æø‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æâ‡Æ∞‡Øà",
        "doctor_appointment": "üìÖ ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øç ‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ",
        "appointments_admin": "üìã ‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡ÆÆ‡Øç",
        "welcome": "**‡Æπ‡ØÜ‡Æ≤‡Øç‡Æ§‡Øç ‡Æπ‡Æ™‡Øç** ‡Æï‡Øç‡Æï‡ØÅ ‡Æµ‡Æ∞‡ØÅ‡Æï",
        "home_intro": "‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡Ææ‡Æ© ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æö‡Øã‡Æ§‡Æ©‡Øà‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øç ‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æµ‡Æ§‡Æ±‡Øç‡Æï‡Ææ‡Æ© ‡Æí‡Æ∞‡ØÅ ‡Æö‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Ææ‡Æ©, ‡Æ™‡ÆØ‡Æ©‡Æ∞‡Øç ‡Æ®‡Æü‡Øç‡Æ™‡ØÅ ‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡Æ≤‡Øç.",
        "interactions_header": "üíä ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æá‡Æü‡Øà‡Æµ‡Æø‡Æ©‡Øà ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡Æ§‡Æ≤‡Øç",
        "interactions_caption": "‡Æ§‡ØÄ‡Æô‡Øç‡Æï‡ØÅ ‡Æµ‡Æø‡Æ≥‡Øà‡Æµ‡Æø‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æü‡Øà‡Æµ‡Æø‡Æ©‡Øà‡Æï‡Æ≥‡Øà‡Æö‡Øç ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï, ‡Æï‡Ææ‡Æ±‡Øç‡Æ™‡ØÅ‡Æ≥‡Øç‡Æ≥‡Æø‡ÆØ‡Ææ‡Æ≤‡Øç ‡Æ™‡Æø‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Æø‡Æ©‡Øç ‡Æ™‡Æü‡Øç‡Æü‡Æø‡ÆØ‡Æ≤‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç.",
        "interactions_placeholder": "‡Æá‡Æ™‡ØÅ‡Æ™‡Øç‡Æ∞‡Øã‡ÆÉ‡Æ™‡ØÜ‡Æ©‡Øç, ‡Æµ‡Ææ‡Æ∞‡Øç‡ÆÉ‡Æ™‡Æ∞‡Æø‡Æ©‡Øç, ‡Æí‡ÆÆ‡ØÜ‡Æ™‡Øç‡Æ∞‡Æö‡Øä‡Æ≤‡Øç",
        "interactions_button": "‡Æá‡Æü‡Øà‡Æµ‡Æø‡Æ©‡Øà‡Æï‡Æ≥‡Øà‡Æö‡Øç ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "interactions_warning_input": "‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§‡Æ§‡ØÅ ‡Æá‡Æ∞‡Æ£‡Øç‡Æü‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øà, ‡Æï‡Ææ‡Æ±‡Øç‡Æ™‡ØÅ‡Æ≥‡Øç‡Æ≥‡Æø‡Æï‡Æ≥‡Ææ‡Æ≤‡Øç ‡Æ™‡Æø‡Æ∞‡Æø‡Æ§‡Øç‡Æ§‡ØÅ ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç.",
        "interactions_warning_count": "‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§‡Æ§‡ØÅ ‡Æá‡Æ∞‡Æ£‡Øç‡Æü‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç.",
        "interactions_error": "‡Æ§‡ØÄ‡Æô‡Øç‡Æï‡ØÅ ‡Æµ‡Æø‡Æ≥‡Øà‡Æµ‡Æø‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æü‡Øà‡Æµ‡Æø‡Æ©‡Øà‡Æï‡Æ≥‡Øç ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ©!",
        "interactions_success": "‡Æ§‡ØÄ‡Æô‡Øç‡Æï‡ØÅ ‡Æµ‡Æø‡Æ≥‡Øà‡Æµ‡Æø‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æü‡Øà‡Æµ‡Æø‡Æ©‡Øà‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà.",
        "dosage_header": "üìè ‡Æµ‡ÆØ‡Æ§‡ØÅ-‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Øç‡Æü ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡Æ≥‡Æµ‡ØÅ ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà",
        "drug_name": "‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç",
        "age_label": "‡Æ®‡Øã‡ÆØ‡Ææ‡Æ≥‡Æø ‡Æµ‡ÆØ‡Æ§‡ØÅ",
        "get_recommendation": "‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡ÆØ‡Øà‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ±‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "alternatives_header": "üîÅ ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà‡Æï‡Æ≥‡Øç",
        "alternatives_input": "‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡ÆØ ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ",
        "suggest_alternatives": "‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "alternatives_success": "**{}** ‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øç:",
        "alternatives_none": "‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà.",
        "nlp_header": "üß† NLP-‡ÆÖ‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øà‡ÆØ‡Æø‡Æ≤‡Ææ‡Æ© ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡Æ™‡Æø‡Æ∞‡Æø‡Æ§‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æ≤‡Øç",
        "nlp_text_area": "‡Æí‡Æ∞‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡Æâ‡Æ∞‡Øà‡ÆØ‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "nlp_placeholder": "‡Æ®‡Øã‡ÆØ‡Ææ‡Æ≥‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡Æ§‡Æø‡Æ©‡ÆÆ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ∞‡Æ£‡Øç‡Æü‡ØÅ ‡ÆÆ‡ØÅ‡Æ±‡Øà 200mg ‡Æá‡Æ™‡ØÅ‡Æ™‡Øç‡Æ∞‡Øã‡ÆÉ‡Æ™‡ØÜ‡Æ©‡Øç ‡Æé‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æ™‡Øç ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ.",
        "extract_info": "‡Æ§‡Æï‡Æµ‡Æ≤‡Øà‡Æ™‡Øç ‡Æ™‡Æø‡Æ∞‡Æø‡Æ§‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "nlp_warning_input": "‡Æö‡Æø‡Æ≤ ‡Æâ‡Æ∞‡Øà‡ÆØ‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç.",
        "nlp_success": "‡Æ™‡Æø‡Æ∞‡Æø‡Æ§‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç:",
        "nlp_no_info": "‡Æâ‡Æ∞‡Øà‡ÆØ‡Æø‡Æ≤‡Øç ‡Æá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æø‡Æ∞‡Æø‡Æ§‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà.",
        "image_to_text_header": "üñºÔ∏è ‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Æø‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æâ‡Æ∞‡Øà (IBM Granite Vision)",
        "input_method": "‡Æâ‡Æ≥‡Øç‡Æ≥‡ØÄ‡Æü‡Øç‡Æü‡ØÅ ‡ÆÆ‡ØÅ‡Æ±‡Øà‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "upload_image": "‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Øà‡Æ™‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡Øá‡Æ±‡Øç‡Æ±‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "capture_webcam": "‡Æµ‡ØÜ‡Æ™‡Øç‡Æï‡Øá‡ÆÆ‡Æø‡Æ≤‡Æø‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æï‡Øà‡Æ™‡Øç‡Æ™‡Æ±‡Øç‡Æ±‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "image_uploader": "‡Æí‡Æ∞‡ØÅ ‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Øà‡Æ™‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡Øá‡Æ±‡Øç‡Æ±‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "image_camera": "‡Æí‡Æ∞‡ØÅ ‡Æ™‡Æü‡ÆÆ‡Øç ‡Æé‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "generate_description": "‡Æµ‡Æø‡Æµ‡Æ∞‡Æ£‡Øà‡ÆØ‡Øà ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "description_success": "‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æµ‡Æø‡Æµ‡Æ∞‡Æ£‡Øà",
        "booking_header": "üìÖ ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øç ‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "booking_caption": "‡Æí‡Æ∞‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ, ‡Æí‡Æ∞‡ØÅ ‡Æ§‡Øá‡Æ§‡Æø ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ, ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Æø‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç. ‡Æ®‡Ææ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æâ‡Æü‡Æ©‡Æü‡Æø‡ÆØ‡Ææ‡Æï ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æµ‡Øã‡ÆÆ‡Øç.",
        "doctor": "‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øç",
        "mode": "‡ÆÆ‡ØÅ‡Æ±‡Øà",
        "date": "‡Æ§‡Øá‡Æ§‡Æø",
        "time": "‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç",
        "no_slots": "‡Æ®‡Øá‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà",
        "patient_details": "‡Æ®‡Øã‡ÆØ‡Ææ‡Æ≥‡Æø ‡Æµ‡Æø‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç",
        "full_name": "‡ÆÆ‡ØÅ‡Æ¥‡ØÅ‡Æ™‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç",
        "email": "‡ÆÆ‡Æø‡Æ©‡Øç‡Æ©‡Æû‡Øç‡Æö‡Æ≤‡Øç (‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡Æø‡Æ©‡Ææ‡Æ≤‡Øç)",
        "phone": "‡Æ§‡Øä‡Æ≤‡Øà‡Æ™‡Øá‡Æö‡Æø",
        "age_patient": "‡Æµ‡ÆØ‡Æ§‡ØÅ",
        "gender": "‡Æ™‡Ææ‡Æ≤‡Æø‡Æ©‡ÆÆ‡Øç",
        "notes": "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Æµ‡Æ≤‡Øà‡ÆØ‡Øà ‡Æµ‡Æø‡Æµ‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç (‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡Æø‡Æ©‡Ææ‡Æ≤‡Øç)",
        "confirm_booking": "‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡Æ§‡Æø‡Æµ‡Øà ‡Æâ‡Æ±‡ØÅ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "required_fields_warning": "‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Øä‡Æ≤‡Øà‡Æ™‡Øá‡Æö‡Æø ‡Æ§‡Øá‡Æµ‡Øà.",
        "slot_taken_error": "‡ÆÆ‡Æ©‡Øç‡Æ©‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡ÆÖ‡Æ®‡Øç‡Æ§ ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç ‡Æá‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æé‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æµ‡Øá‡Æ±‡ØÅ ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.",
        "booking_success": "‚úÖ ‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ! ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æê‡Æü‡Æø **{}**.",
        "view_details": "‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æµ‡Æø‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "admin_header": "üìã ‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡ÆÆ‡Øç",
        "admin_caption": "‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æµ‡Æü‡Æø‡Æï‡Æü‡Øç‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Øà ‡Æ™‡ØÅ‡Æ§‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æè‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Æ§‡Æø ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç.",
        "no_appointments": "‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà.",
        "all": "‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ‡ÆÆ‡Øç",
        "status": "‡Æ®‡Æø‡Æ≤‡Øà",
        "from": "‡Æá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ",
        "to": "‡Æµ‡Æ∞‡Øà",
        "download_csv": "‚¨áÔ∏è CSV ‡Æ™‡Æ§‡Æø‡Æµ‡Æø‡Æ±‡Æï‡Øç‡Æï",
        "update_status": "‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Øà ‡Æ™‡ØÅ‡Æ§‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "booking_id": "‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æê‡Æü‡Æø",
        "new_status": "‡Æ™‡ØÅ‡Æ§‡Æø‡ÆØ ‡Æ®‡Æø‡Æ≤‡Øà",
        "update_button": "‡Æ™‡ØÅ‡Æ§‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
        "status_updated": "‡Æ®‡Æø‡Æ≤‡Øà ‡Æ™‡ØÅ‡Æ§‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ.",
        "booking_id_not_found": "‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æê‡Æü‡Æø ‡Æï‡Æ£‡Øç‡Æü‡Æ±‡Æø‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà."
    }
}

# Function to get the current language and its translations
def get_language():
    if 'language' not in st.session_state:
        st.session_state.language = "English"
    return st.session_state.language, translations[st.session_state.language]
def listen_for_emergency():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        st.info("üé§ Listening... Say 'healthhub emergency' loudly!")
        try:
            audio = r.listen(source, timeout=5, phrase_time_limit=5)
            text = r.recognize_google(audio).lower()
            if "healthhub emergency" in text:
                st.error("üö® Emergency Detected! Calling now...")
                # Open phone dialer (works on mobile/web)
                webbrowser.open(f"tel:{EMERGENCY_NUMBER}")
            else:
                st.warning("üö® Emergency Detected! Calling now...")
        except Exception as e:
            st.warning(f"Listening failed: {e}")
# ------------------------------
# Helpers
# ------------------------------
def post_json(path: str, payload: dict):
    try:
        with st.spinner("Contacting server..."):
            r = requests.post(f"{BASE_URL}{path}", json=payload, timeout=15)
        if r.status_code == 200:
            return True, r.json()
        else:
            return False, {"error": f"HTTP {r.status_code}: {r.text}"}
    except requests.exceptions.ConnectionError as e:
        return False, {"error": "Connection error. Is the FastAPI server running?", "detail": str(e)}
    except requests.exceptions.Timeout as e:
        return False, {"error": "Request timed out.", "detail": str(e)}
    except Exception as e:
        return False, {"error": "Unknown error", "detail": str(e)}

def init_csv():
    p = Path(APPTS_CSV)
    if not p.exists():
        df = pd.DataFrame(columns=[
            "booking_id","patient_name","phone","email","age","gender",
            "doctor","speciality","mode","date","time","notes","created_at","status"
        ])
        df.to_csv(APPTS_CSV, index=False)
    return p

def read_appts():
    init_csv()
    return pd.read_csv(APPTS_CSV)

def write_appt(row: dict):
    df = read_appts()
    df = pd.concat([df, pd.DataFrame([row])], ignore_index=True)
    df.to_csv(APPTS_CSV, index=False)

def is_slot_taken(df: pd.DataFrame, doctor: str, appt_date: str, appt_time: str):
    if df.empty:
        return False
    clash = df[        (df["doctor"] == doctor) &        (df["date"] == appt_date) &        (df["time"] == appt_time) &        (df["status"].isin(["Booked","Confirmed"]))    ]
    return not clash.empty

def gen_slots(start="09:00", end="17:00", step_minutes=30):
    from datetime import datetime as _dt
    start_t = _dt.combine(date.today(), _dt.strptime(start, "%H:%M").time())
    end_t = _dt.combine(date.today(), _dt.strptime(end, "%H:%M").time())
    slots = []
    cur = start_t
    while cur <= end_t:
        slots.append(cur.strftime("%H:%M"))
        cur += timedelta(minutes=step_minutes)
    return slots

DOCTORS = [
    {"name":"Dr. A. Rao","speciality":"General Physician"},
    {"name":"Dr. S. Mehta","speciality":"Cardiologist"},
    {"name":"Dr. P. Kulkarni","speciality":"Pediatrician"},
    {"name":"Dr. R. Nair","speciality":"Dermatologist"},
]

# ------------------------------
# Sidebar Navigation
# ------------------------------
with st.sidebar:
    st.image("https://cdn-icons-png.flaticon.com/512/2966/2966327.png", width=64)
    st.title("HealthHub")
    st.caption("Drug tools ‚Ä¢ Appointments ‚Ä¢ NLP")

    # Language selection
    lang_options = list(translations.keys())
    st.session_state.language = st.selectbox("Choose Language", lang_options, index=lang_options.index(st.session_state.language) if 'language' in st.session_state else 0)
    
    current_lang, t = get_language()

    page = st.radio(t["navigate"], [
        t["home"],
        t["drug_interaction"],
        t["dosage_by_age"],
        t["alternatives"],
        t["nlp_extract"],
        t["image_to_text"],
        t["doctor_appointment"],
        t["appointments_admin"]
    ])
    st.markdown("---")
    st.markdown("**Backend:** " + BASE_URL)


# ------------------------------
# Pages
# ------------------------------
def page_home():
    current_lang, t = get_language()
    st.markdown(f"### {t['welcome']}")
    st.write(t["home_intro"])
    c1, c2, c3 = st.columns(3)
    with c1: st.markdown('<div class="metric-card"><div class="pill">Tool</div><h3>Drug Interactions</h3><p class="muted">Check for harmful combinations</p></div>', unsafe_allow_html=True)
    with c2: st.markdown('<div class="metric-card"><div class="pill">Tool</div><h3>Dosage by Age</h3><p class="muted">Age-appropriate recommendations</p></div>', unsafe_allow_html=True)
    with c3: st.markdown('<div class="metric-card"><div class="pill">New</div><h3>Doctor Appointments</h3><p class="muted">Book a visit or video consult</p></div>', unsafe_allow_html=True)
    if st.button("üö® Activate Voice Emergency"):
        listen_for_emergency()

def page_interactions():
    current_lang, t = get_language()
    st.header(t["interactions_header"])
    st.caption(t["interactions_caption"])
    drugs_input = st.text_area(t["drug_interaction"], placeholder=t["interactions_placeholder"])
    if st.button(t["interactions_button"], type="primary"):
        if not drugs_input.strip():
            st.warning(t["interactions_warning_input"])
            return
        drugs_list = [d.strip() for d in drugs_input.split(",") if d.strip()]
        if len(drugs_list) < 2:
            st.warning(t["interactions_warning_count"])
            return
        ok, data = post_json("/check_interactions", {"drugs": drugs_list})
        if ok:
            if data.get("status") == "warning":
                st.error(t["interactions_error"])
                for it in data.get("interactions", []):
                    st.write(f"- {it}")
            else:
                st.success(t["interactions_success"])
        else:
            st.error(data.get("error","Error"))
            if "detail" in data: st.caption(data["detail"])

def page_dosage():
    current_lang, t = get_language()
    st.header(t["dosage_header"])
    c1, c2 = st.columns([2,1])
    with c1:
        drug = st.text_input(t["drug_name"], placeholder="ibuprofen")
    with c2:
        age = st.number_input(t["age_label"], min_value=0, max_value=120, value=30)
    if st.button(t["get_recommendation"], type="primary"):
        if not drug.strip():
            st.warning(t["drug_name"])
            return
        ok, data = post_json("/recommend_dosage", {"drug": drug, "age": int(age)})
        if ok:
            st.info(f"**Recommendation for {data.get('drug', drug)} (Age {age}):** {data.get('recommendation','‚Äî')}")
        else:
            st.error(data.get("error","Error")); st.caption(data.get("detail",""))

def page_alternatives():
    current_lang, t = get_language()
    st.header(t["alternatives_header"])
    drug = st.text_input(t["alternatives_input"], placeholder="warfarin")
    if st.button(t["suggest_alternatives"], type="primary"):
        if not drug.strip():
            st.warning(t["alternatives_input"])
            return
        ok, data = post_json("/suggest_alternatives", {"drug": drug})
        if ok:
            alts = data.get("alternatives", [])
            if alts:
                st.success(f"{t['alternatives_success'].format(data.get('drug',drug))} " + ', '.join(alts))
            else:
                st.warning(t["alternatives_none"])
        else:
            st.error(data.get("error","Error")); st.caption(data.get("detail",""))

def page_nlp():
    current_lang, t = get_language()
    st.header(t["nlp_header"])
    txt = st.text_area(t["nlp_text_area"], height=160, placeholder=t["nlp_placeholder"])
    if st.button(t["extract_info"], type="primary"):
        if not txt.strip():
            st.warning(t["nlp_warning_input"])
            return
        ok, data = post_json("/extract_info", {"text": txt})
        if ok:
            if data.get("status") == "success" and data.get("matches"):
                st.success(t["nlp_success"])
                st.json(data.get("matches"))   # ‚úÖ fixed
            elif data.get("status") == "no_match":
                st.warning(t["nlp_no_info"])
            else:
                st.error(data.get("message","Unknown error."))
        else:
            st.error(data.get("error","Error"))
            st.caption(data.get("detail",""))

def page_image_to_text():
    current_lang, t = get_language()
    st.header(t["image_to_text_header"])
    method = st.radio(t["input_method"], [t["upload_image"], t["capture_webcam"]], horizontal=True)

    uploaded = None
    if method == t["upload_image"]:
        uploaded = st.file_uploader(t["image_uploader"], type=["jpg", "jpeg", "png"])
    else:
        uploaded = st.camera_input(t["image_camera"])

    if uploaded:
        st.image(uploaded, caption="Selected image", use_container_width=True)  # ‚úÖ replaced deprecated param

    if uploaded and st.button(t["generate_description"], type="primary"):
        try:
            files = {"file": ("image.png", uploaded.getvalue(), "image/png")}
            with st.spinner("Talking to Granite Vision..."):
                r = requests.post(f"{BASE_URL}/image_to_text", files=files, timeout=60)

            if r.status_code == 200:
                data = r.json()

                # Always show raw OCR details
                st.subheader("üîé OCR Debug Info")
                st.json({
                    "OCR Raw": data.get("caption_raw"),
                    "OCR Joined": data.get("caption_joined"),
                    "Normalized": data.get("caption_normalized"),
                    "Similarities": data.get("similarities"),
                })

                if data.get("status") == "success" and data.get("matches"):
                    st.success(t["description_success"])
                    st.write("**Caption:**", data.get("caption", "‚Äî"))

                    st.subheader("‚úÖ Related Dataset Entries")
                    st.json(data["matches"])
                else:
                    st.warning("‚ö† No matching entries found in dataset.")

            else:
                st.error(f"HTTP {r.status_code}: {r.text}")
        except Exception as e:
            st.error(f"Request failed: {e}")


def page_booking():
    current_lang, t = get_language()
    st.header(t["booking_header"])
    st.caption(t["booking_caption"])

    df = read_appts()
    cols = st.columns(2)
    with cols[0]:
        doc_names = [f"{d['name']} ‚Äî {d['speciality']}" for d in DOCTORS]
        doc_display = st.selectbox(t["doctor"], doc_names, index=0)
        sel = DOCTORS[doc_names.index(doc_display)]
        speciality = sel["speciality"]
    with cols[1]:
        mode = st.selectbox(t["mode"], ["In-clinic", "Video Call"])

    c2 = st.columns(3)
    with c2[0]:
        appt_date = st.date_input(t["date"], min_value=date.today())
    with c2[1]:
        slots = gen_slots("09:00","17:00",30)
        taken = set(df[(df["doctor"]==sel["name"]) & (df["date"]==appt_date.strftime("%Y-%m-%d"))]["time"].tolist())
        free_slots = [s for s in slots if s not in taken]
        appt_time = st.selectbox(t["time"], free_slots if free_slots else [t["no_slots"]])
    with c2[2]:
        pass

    st.markdown("---")
    st.subheader(t["patient_details"])
    p1, p2, p3 = st.columns([2,1,1])
    with p1:
        patient_name = st.text_input(t["full_name"])
        email = st.text_input(t["email"])
    with p2:
        phone = st.text_input(t["phone"])
    with p3:
        age = st.number_input(t["age_patient"], min_value=0, max_value=120, value=30)
    gender = st.selectbox(t["gender"], ["Female","Male","Other","Prefer not to say"], index=0)
    notes = st.text_area(t["notes"], height=100)

    if st.button(t["confirm_booking"], type="primary", use_container_width=True, disabled=(appt_time==t["no_slots"])):
        if not patient_name.strip() or not phone.strip():
            st.warning(t["required_fields_warning"])
            return
        appt_date_str = appt_date.strftime("%Y-%m-%d")
        if is_slot_taken(df, sel["name"], appt_date_str, appt_time):
            st.error(t["slot_taken_error"])
            st.stop()
        booking = {
            "booking_id": str(uuid.uuid4())[:8].upper(),
            "patient_name": patient_name.strip(),
            "phone": phone.strip(),
            "email": email.strip(),
            "age": int(age),
            "gender": gender,
            "doctor": sel["name"],
            "speciality": speciality,
            "mode": mode,
            "date": appt_date_str,
            "time": appt_time,
            "notes": notes.strip(),
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "status": "Booked"
        }
        write_appt(booking)
        st.success(f"‚úÖ {t['booking_success'].format(booking['booking_id'])}")
        with st.expander(t["view_details"]):
            st.json(booking)

def page_admin():
    current_lang, t = get_language()
    st.header(t["admin_header"])
    st.caption(t["admin_caption"])
    init_csv()
    df = read_appts()
    if df.empty:
        st.info(t["no_appointments"])
        return
    c = st.columns(4)
    with c[0]:
        doctor_f = st.selectbox(t["doctor"], [t["all"]] + [d["name"] for d in DOCTORS])
    with c[1]:
        status_f = st.selectbox(t["status"], [t["all"],"Booked","Confirmed","Cancelled","Completed"], index=0)
    with c[2]:
        start_d = st.date_input(t["from"], value=date.today()-timedelta(days=7))
    with c[3]:
        end_d = st.date_input(t["to"], value=date.today()+timedelta(days=30))

    mask = (
        (pd.to_datetime(df["date"]) >= pd.to_datetime(start_d)) &
        (pd.to_datetime(df["date"]) <= pd.to_datetime(end_d))
    )
    if doctor_f != t["all"]:
        mask &= (df["doctor"] == doctor_f)
    if status_f != t["all"]:
        mask &= (df["status"] == status_f)
    view = df[mask].copy()
    st.dataframe(view, use_container_width=True)

    st.download_button(f"‚¨áÔ∏è {t['download_csv']}", data=view.to_csv(index=False), file_name="appointments_filtered.csv", mime="text/csv")

    st.markdown("---")
    st.subheader(t["update_status"])
    if not df.empty:
        bid = st.text_input(t["booking_id"])
        new_status = st.selectbox(t["new_status"], ["Confirmed","Cancelled","Completed"])
        if st.button(t["update_button"]):
            idx = df.index[df["booking_id"]==bid].tolist()
            if idx:
                df.loc[idx[0], "status"] = new_status
                df.to_csv(APPTS_CSV, index=False)
                st.success(t["status_updated"])
            else:
                st.error(t["booking_id_not_found"])


current_lang, t = get_language()
if page == t["home"]:
    page_home()
elif page == t["drug_interaction"]:
    page_interactions()
elif page == t["dosage_by_age"]:
    page_dosage()
elif page == t["alternatives"]:
    page_alternatives()
elif page == t["nlp_extract"]:
    page_nlp()
elif page == t["image_to_text"]:
    page_image_to_text()
elif page == t["doctor_appointment"]:
    page_booking()
elif page == t["appointments_admin"]:
    page_admin()